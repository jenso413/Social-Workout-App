{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\Logger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport '../css/logger.css';\nimport Exercise from './Exercise';\nimport LoggerHeader from './LoggerHeader';\nimport Navbar from './Navbar';\nimport FriendList from './FriendList';\nimport AddWorkout from './AddWorkout';\nimport WorkoutTracker from './WorkoutTracker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Logger() {\n  _s();\n\n  const [addWorkout, setAddWorkout] = useState(true);\n  const [workoutName, setWorkoutName] = useState('New Workout');\n  const [programName, setProgramName] = useState('Michael');\n  const [workoutNameList, setWorkoutNameList] = useState([]);\n  const [programData, setProgramData] = useState({});\n  const [workout, setWorkout] = useState({});\n\n  function displayAddWorkout() {\n    setAddWorkout(true);\n  }\n\n  function displayLogger() {\n    setAddWorkout(false);\n  }\n\n  function handleWorkoutNameChange(e) {\n    console.log(e);\n  } // On load, get function to populate dropdown with workout names for chosen community\n  // Selected community will be global redux state\n  // Program Name it accepts is actually community\n\n\n  useEffect(() => {\n    fetch(`/api/workouts/program/${programName}`).then(res => res.json()).then(data => {\n      console.log(data);\n      setProgramData(data);\n      setProgramName(data.programName); // Set into redux state? Or maybe just normal state\n\n      data.workouts.forEach(workout => setWorkoutNameList(prevList => [...prevList, workout.workoutName]));\n    });\n  }, []);\n  console.log(name);\n  console.log(programData); // If the click in loggerHeader matches the workout name, display workout data\n\n  function dropdownClick(e) {\n    console.log(e.target.innerText);\n    const workouts = programData.workouts;\n\n    for (let workout of workouts) {\n      if (workout.workoutName == e.target.innerText) {\n        setWorkout(workout);\n      }\n    }\n\n    setAddWorkout(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(FriendList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(LoggerHeader, {\n          displayAddWorkout: displayAddWorkout,\n          displayLogger: displayLogger,\n          workoutName: workoutName,\n          handleWorkoutNameChange: handleWorkoutNameChange,\n          setWorkoutName: setWorkoutName,\n          programName: programName,\n          workoutNameList: workoutNameList,\n          dropdownClick: dropdownClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), addWorkout ? /*#__PURE__*/_jsxDEV(AddWorkout, {\n          workoutName: workoutName,\n          setWorkoutName: setWorkoutName,\n          programName: programName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 36\n        }, this) : /*#__PURE__*/_jsxDEV(WorkoutTracker, {\n          workout: workout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Logger, \"3LkBh3YO1dcnI36l/44P8G9Tz0M=\");\n\n_c = Logger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Logger\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/Logger.js"],"names":["React","useEffect","useState","useSelector","Exercise","LoggerHeader","Navbar","FriendList","AddWorkout","WorkoutTracker","Logger","addWorkout","setAddWorkout","workoutName","setWorkoutName","programName","setProgramName","workoutNameList","setWorkoutNameList","programData","setProgramData","workout","setWorkout","displayAddWorkout","displayLogger","handleWorkoutNameChange","e","console","log","fetch","then","res","json","data","workouts","forEach","prevList","name","dropdownClick","target","innerText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport '../css/logger.css'\r\nimport Exercise from './Exercise'\r\nimport LoggerHeader from './LoggerHeader'\r\nimport Navbar from './Navbar'\r\nimport FriendList from './FriendList'\r\nimport AddWorkout from './AddWorkout'\r\nimport WorkoutTracker from './WorkoutTracker'\r\n\r\nexport default function Logger() {\r\n\r\n    const [addWorkout, setAddWorkout] = useState(true)\r\n    const [workoutName, setWorkoutName] = useState('New Workout')\r\n    const [programName, setProgramName] = useState('Michael')\r\n    const [workoutNameList, setWorkoutNameList] = useState([])\r\n    const [programData, setProgramData] = useState({})\r\n\r\n    const [workout, setWorkout] = useState({})\r\n\r\n    function displayAddWorkout() {\r\n        setAddWorkout(true)\r\n    }\r\n\r\n    function displayLogger() {\r\n        setAddWorkout(false)\r\n    }\r\n\r\n    function handleWorkoutNameChange(e) {\r\n        console.log(e)\r\n    }\r\n\r\n    // On load, get function to populate dropdown with workout names for chosen community\r\n    // Selected community will be global redux state\r\n    // Program Name it accepts is actually community\r\n    useEffect(() => {\r\n        fetch(`/api/workouts/program/${programName}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                setProgramData(data)\r\n                setProgramName(data.programName) \r\n                // Set into redux state? Or maybe just normal state\r\n                data.workouts.forEach(workout => setWorkoutNameList(prevList => [...prevList, workout.workoutName]))\r\n            })\r\n    }, [])\r\n\r\n    console.log(name)\r\n    console.log(programData)\r\n\r\n    // If the click in loggerHeader matches the workout name, display workout data\r\n    function dropdownClick(e) {\r\n        console.log(e.target.innerText)\r\n\r\n        const workouts = programData.workouts\r\n\r\n        for (let workout of workouts) {\r\n            if (workout.workoutName == e.target.innerText) {\r\n                setWorkout(workout)\r\n            }\r\n        }\r\n\r\n        setAddWorkout(false)\r\n    }\r\n\r\n    return (\r\n        <div className='main'>\r\n            <Navbar />\r\n            <div className='body'>\r\n                <FriendList />\r\n                <div className='container'>\r\n                    <LoggerHeader \r\n                        displayAddWorkout={displayAddWorkout}\r\n                        displayLogger={displayLogger}\r\n                        workoutName={workoutName}\r\n                        handleWorkoutNameChange={handleWorkoutNameChange}\r\n                        setWorkoutName={setWorkoutName}\r\n                        programName = {programName}\r\n                        workoutNameList={workoutNameList}\r\n                        dropdownClick={dropdownClick}\r\n                    />\r\n\r\n                    {addWorkout ? (<AddWorkout workoutName={workoutName} setWorkoutName={setWorkoutName} programName={programName}/>): \r\n\r\n                    (<WorkoutTracker workout={workout}/>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\Leaderboard.js\",\n    _s = $RefreshSig$();\n\nimport { ConstructionOutlined } from '@mui/icons-material';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FriendList from './FriendList';\nimport Navbar from './Navbar';\nimport LeaderboardUser from './LeaderboardUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Leaderboard() {\n  _s();\n\n  const userCommunityId = useSelector(state => state.auth.user.community);\n  const [userArray, setUserArray] = useState([]); // also want to update whenever socket changes, as well as friends sidebar\n\n  useEffect(() => {\n    fetch(`/api/workouts/program/${userCommunityId}/members`).then(res => res.json()).then(data => {\n      // all we can do here is sort, no logic can be added\n      const sortedData = data.sort((a, b) => a.streak - b.streak);\n      setUserArray(sortedData);\n    });\n  }, []);\n  let rank = 0;\n  const streakArray = []; // needs to change/update whenever socket updates (DB changes)\n\n  const tableElements = userArray.map((user, index) => {\n    const {\n      username,\n      community,\n      profilePic,\n      streak\n    } = user;\n\n    if (user.streak != streakArray[streakArray.length - 1]) {\n      rank += 1;\n    }\n\n    streakArray.push(user.streak);\n    return /*#__PURE__*/_jsxDEV(LeaderboardUser, {\n      rank: rank,\n      name: username,\n      communityId: community,\n      profilePic: profilePic,\n      streak: streak\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(FriendList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          border: '1px solid black'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Rank\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Streak\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Member Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Community Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableElements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Leaderboard, \"J66hn6gnlmNfuQsxIJ91colvoBg=\", false, function () {\n  return [useSelector];\n});\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/Leaderboard.js"],"names":["ConstructionOutlined","React","useEffect","useState","useSelector","FriendList","Navbar","LeaderboardUser","Leaderboard","userCommunityId","state","auth","user","community","userArray","setUserArray","fetch","then","res","json","data","sortedData","sort","a","b","streak","rank","streakArray","tableElements","map","index","username","profilePic","length","push","border"],"mappings":"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","sourcesContent":["import { ConstructionOutlined } from '@mui/icons-material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport FriendList from './FriendList'\r\nimport Navbar from './Navbar'\r\nimport LeaderboardUser from './LeaderboardUser'\r\n\r\nfunction Leaderboard() {\r\n\r\n    const userCommunityId = useSelector(state => state.auth.user.community)\r\n    const [userArray, setUserArray] = useState([])\r\n\r\n    // also want to update whenever socket changes, as well as friends sidebar\r\n    useEffect(() => {\r\n        fetch(`/api/workouts/program/${userCommunityId}/members`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                // all we can do here is sort, no logic can be added\r\n                const sortedData = data.sort((a, b) => a.streak - b.streak)\r\n                setUserArray(sortedData)\r\n            })\r\n    }, [])\r\n\r\n    let rank = 0\r\n    const streakArray = []\r\n\r\n    // needs to change/update whenever socket updates (DB changes)\r\n    const tableElements = userArray.map((user, index) => {\r\n        const { username, community, profilePic, streak } = user\r\n        if (user.streak != streakArray[streakArray.length - 1]) {\r\n            rank += 1\r\n        }\r\n        streakArray.push(user.streak)\r\n        return <LeaderboardUser key={index} rank={rank} name={username} communityId={community} profilePic={profilePic} streak={streak}/>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar />\r\n            <div className='grid-container'>\r\n                <FriendList />\r\n                <table style={{border: '1px solid black'}}>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Rank</th>\r\n                            <th>Streak</th>\r\n                            <th>Member Name</th>\r\n                            <th>Community Name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableElements}\r\n                    </tbody>\r\n                    \r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Leaderboard"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\Exercise.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport '../css/exercise.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Exercise(_ref) {\n  _s();\n\n  let {\n    exercise\n  } = _ref;\n  const {\n    exerciseName,\n    repRange,\n    setCount\n  } = exercise;\n  const initialExerciseData = {\n    exerciseName,\n    weight: 0,\n    reps: []\n  };\n  const [exerciseData, setExerciseData] = useState(initialExerciseData);\n  const [inputArray, setInputArray] = useState([]); // Create x inputs depending on setCount\n\n  useEffect(() => {\n    const inputs = [];\n\n    for (let i = 0; i < setCount; i++) {\n      const input = /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"reps\",\n        placeholder: repRange,\n        onChange: handleChange,\n        index: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 27\n      }, this);\n\n      inputs.push(input);\n    }\n\n    setInputArray(...inputs);\n  }, []);\n  console.log(inputArray);\n\n  function handleChange(e) {\n    switch (e.target.name) {\n      case 'weight':\n        setExerciseData(prevState => ({ ...prevState,\n          weight: e.target.value\n        }));\n        break;\n\n      case 'reps':\n        const inputIndex = e.target.getAttribute('index');\n        setExerciseData(prevState => ({ ...prevState,\n          // Problem occurs when I type in index 2, and then type in index 1. deletes index 2\n          // Typing in an earlier index deletes all values after it. Type in index 1, deletes index 2, 3 \n          // prevState.reps = [10, 9, 8]\n          // input index is 1\n          // index 2 is disappearing\n          reps: [...prevState.reps.slice(0, inputIndex), e.target.value, ...prevState.reps.slice(inputIndex + 1)]\n        }));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: exerciseName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"weight\",\n        onChange: handleChange,\n        value: exerciseData.weight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reps-container\",\n        children: inputArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Exercise, \"B5RPfAz0HW1yukbGWehnSKKOfmA=\");\n\n_c = Exercise;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exercise\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/Exercise.js"],"names":["React","useEffect","useState","Exercise","exercise","exerciseName","repRange","setCount","initialExerciseData","weight","reps","exerciseData","setExerciseData","inputArray","setInputArray","inputs","i","input","handleChange","push","console","log","e","target","name","prevState","value","inputIndex","getAttribute","slice"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,qBAAP;;AAEA,eAAe,SAASC,QAAT,OAAgC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAE3C,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA;AAA1B,MAAuCH,QAA7C;AAEA,QAAMI,mBAAmB,GAAG;AACxBH,IAAAA,YADwB;AAExBI,IAAAA,MAAM,EAAE,CAFgB;AAGxBC,IAAAA,IAAI,EAAE;AAHkB,GAA5B;AAMA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACM,mBAAD,CAAhD;AAEA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C,CAZ2C,CAc3C;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGT,QAAlB,EAA4BS,CAAC,EAA7B,EAAiC;AAC7B,YAAMC,KAAK,gBAAG;AAAe,QAAA,IAAI,EAAC,MAApB;AAA2B,QAAA,WAAW,EAAEX,QAAxC;AAAkD,QAAA,QAAQ,EAAEY,YAA5D;AAA0E,QAAA,KAAK,EAAEF;AAAjF,SAAYA,CAAZ;AAAA;AAAA;AAAA;AAAA,cAAd;;AACAD,MAAAA,MAAM,CAACI,IAAP,CAAYF,KAAZ;AACH;;AAEDH,IAAAA,aAAa,CAAC,GAAGC,MAAJ,CAAb;AACH,GATQ,EASN,EATM,CAAT;AAWAK,EAAAA,OAAO,CAACC,GAAR,CAAYR,UAAZ;;AAGA,WAASK,YAAT,CAAsBI,CAAtB,EAAyB;AACrB,YAAQA,CAAC,CAACC,MAAF,CAASC,IAAjB;AACI,WAAK,QAAL;AACIZ,QAAAA,eAAe,CAACa,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1BhB,UAAAA,MAAM,EAAGa,CAAC,CAACC,MAAF,CAASG;AAFQ,SAAL,CAAV,CAAf;AAIA;;AACJ,WAAK,MAAL;AACI,cAAMC,UAAU,GAAGL,CAAC,CAACC,MAAF,CAASK,YAAT,CAAsB,OAAtB,CAAnB;AACAhB,QAAAA,eAAe,CAACa,SAAS,KAAK,EAC1B,GAAGA,SADuB;AAE1B;AACA;AACA;AACA;AACA;AACAf,UAAAA,IAAI,EAAG,CAAC,GAAGe,SAAS,CAACf,IAAV,CAAemB,KAAf,CAAqB,CAArB,EAAwBF,UAAxB,CAAJ,EAAyCL,CAAC,CAACC,MAAF,CAASG,KAAlD,EAAyD,GAAGD,SAAS,CAACf,IAAV,CAAemB,KAAf,CAAqBF,UAAU,GAAG,CAAlC,CAA5D;AAPmB,SAAL,CAAV,CAAf;AATR;AAoBH;;AAED,sBACI;AAAA,4BACI;AAAA,gBAAKtB;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,QAAQ,EAAEa,YAA/B;AAA6C,QAAA,KAAK,EAAEP,YAAY,CAACF;AAAjE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBACKI;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAjEuBV,Q;;KAAAA,Q","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport '../css/exercise.css'\r\n\r\nexport default function Exercise({ exercise }) {\r\n\r\n    const { exerciseName, repRange, setCount } = exercise\r\n\r\n    const initialExerciseData = {\r\n        exerciseName,\r\n        weight: 0,\r\n        reps: []\r\n    }\r\n\r\n    const [exerciseData, setExerciseData] = useState(initialExerciseData)\r\n\r\n    const [inputArray, setInputArray] = useState([])\r\n\r\n    // Create x inputs depending on setCount\r\n    useEffect(() => {\r\n        const inputs = []\r\n\r\n        for (let i=0; i < setCount; i++) {\r\n            const input = <input key={i} name='reps' placeholder={repRange} onChange={handleChange} index={i}></input>\r\n            inputs.push(input)\r\n        }\r\n\r\n        setInputArray(...inputs)\r\n    }, [])\r\n\r\n    console.log(inputArray)\r\n    \r\n\r\n    function handleChange(e) {\r\n        switch (e.target.name) {\r\n            case 'weight' :\r\n                setExerciseData(prevState => ({\r\n                    ...prevState,\r\n                    weight : e.target.value\r\n                }))\r\n                break;\r\n            case 'reps' :\r\n                const inputIndex = e.target.getAttribute('index')\r\n                setExerciseData(prevState => ({\r\n                    ...prevState,\r\n                    // Problem occurs when I type in index 2, and then type in index 1. deletes index 2\r\n                    // Typing in an earlier index deletes all values after it. Type in index 1, deletes index 2, 3 \r\n                    // prevState.reps = [10, 9, 8]\r\n                    // input index is 1\r\n                    // index 2 is disappearing\r\n                    reps : [...prevState.reps.slice(0, inputIndex), e.target.value, ...prevState.reps.slice(inputIndex + 1)]\r\n                }))\r\n        }\r\n        \r\n    }\r\n    \r\n    return (\r\n        <tr>\r\n            <td>{exerciseName}</td>\r\n            <td>\r\n                <input name='weight' onChange={handleChange} value={exerciseData.weight}></input>\r\n            </td>\r\n            <td >\r\n                <div className='reps-container'>\r\n                    {inputArray}\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { postService } from './postService';\nconst initialState = {\n  posts: [],\n  isError: false,\n  isLoading: false,\n  isSuccess: false,\n  message: ''\n};\nconst createPost = createAsyncThunk('user/posts', async (postData, thunkAPI) => {\n  try {\n    return await postService.createPost(postData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport default postSlice.reducer;\nexport const {\n  reset\n} = postSlice.actions;","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/redux/postSlice.js"],"names":["createAsyncThunk","createSlice","postService","initialState","posts","isError","isLoading","isSuccess","message","createPost","postData","thunkAPI","error","response","data","toString","rejectWithValue","postSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","user","payload","rejected","reducer","actions"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAIjBC,EAAAA,SAAS,EAAE,KAJM;AAKjBC,EAAAA,OAAO,EAAE;AALQ,CAArB;AAQA,MAAMC,UAAU,GAAGT,gBAAgB,CAAC,YAAD,EAAgB,OAAOU,QAAP,EAAiBC,QAAjB,KAA8B;AAC7E,MAAI;AACA,WAAO,MAAMT,WAAW,CAACO,UAAZ,CAAuBC,QAAvB,CAAb;AACH,GAFD,CAEE,OAAOE,KAAP,EAAc;AACZ,UAAMJ,OAAO,GAAII,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAjC,IAAyCF,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBN,OAA9D,IAA0EI,KAAK,CAACJ,OAAhF,IAA2FI,KAAK,CAACG,QAAN,EAA3G;AACA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBR,OAAzB,CAAP;AACH;AACJ,CAPkC,CAAnC;AASA,OAAO,MAAMS,SAAS,GAAGhB,WAAW,CAAC;AACjCiB,EAAAA,IAAI,EAAE,OAD2B;AAEjCf,EAAAA,YAFiC;AAGjCgB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAGC,KAAD,IAAWlB;AADZ,GAHuB;AAMjCmB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaf,UAAU,CAACgB,OADxB,EACkCJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACf,SAAN,GAAkB,IAAlB;AACH,KAHL,EAIKkB,OAJL,CAIaf,UAAU,CAACiB,SAJxB,EAImC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAACd,SAAN,GAAkB,IAAlB;AACAc,MAAAA,KAAK,CAACO,IAAN,GAAaD,MAAM,CAACE,OAApB;AACH,KARL,EASKL,OATL,CASaf,UAAU,CAACqB,QATxB,EASkC,CAACT,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAACf,SAAN,GAAkB,KAAlB;AACAe,MAAAA,KAAK,CAAChB,OAAN,GAAgB,IAAhB;AACAgB,MAAAA,KAAK,CAACb,OAAN,GAAgBmB,MAAM,CAACE,OAAvB;AACH,KAbL;AAcH;AArBgC,CAAD,CAA7B;AAwBP,eAAeZ,SAAS,CAACc,OAAzB;AACA,OAAO,MAAM;AAAEX,EAAAA;AAAF,IAAYH,SAAS,CAACe,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { postService } from './postService'\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    isError: false,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    message: ''\r\n}\r\n\r\nconst createPost = createAsyncThunk('user/posts',  async (postData, thunkAPI) => {\r\n    try {\r\n        return await postService.createPost(postData)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const postSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => initialState\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(createPost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(createPost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(createPost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport default postSlice.reducer\r\nexport const { reset } = postSlice.actions"]},"metadata":{},"sourceType":"module"}
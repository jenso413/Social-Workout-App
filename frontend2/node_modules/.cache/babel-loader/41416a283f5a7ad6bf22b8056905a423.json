{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\AddWorkout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport NewExercise from \"./NewExercise\";\nimport AddIcon from '@mui/icons-material/Add';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addWorkoutName, reset } from \"../redux/workoutSlice\";\nimport programSlice, { addWorkout } from \"../redux/programSlice\";\nimport CheckIcon from '@mui/icons-material/Check';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddWorkout() {\n  _s();\n\n  const dispatch = useDispatch();\n  const fullWorkout = useSelector(state => state.workout);\n  const programName = useSelector(state => state.program.name);\n  const newExercise = {\n    exerciseName: '',\n    setCount: '',\n    repRange: ''\n  };\n  const [keyId, setKeyId] = useState(0);\n  const [workoutName, setWorkoutName] = useState('');\n  const [exerciseList, setExerciseList] = useState([]); // gives workout name and info\n\n  const workoutInfo = useSelector(state => state.workout);\n\n  function addExercise() {\n    console.log('hello');\n    setKeyId(prevKey => prevKey + 1);\n    setExerciseList(prevList => [...prevList, newExercise]);\n  }\n\n  function submitWorkout() {\n    dispatch(addWorkout(fullWorkout)); // dispatch(reset())\n    // addToServer()\n  }\n\n  function addToServer() {\n    // Add workout to DB\n    fetch('/api/workouts/add-workout', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        workoutName,\n        programName,\n        exerciseList\n      })\n    }).then(res => res.json()).then(data => console.log(data)); // Populate Program with workout\n  }\n\n  function handleName(e) {\n    setWorkoutName(e.target.value);\n  }\n\n  function onChange(e, index) {\n    // const exercise = exerciseList[index]\n    // const inputName = e.target.name\n    // // { exerciseName: '', setCount: '', repRange: '' }\n    // // exerciseName\n    // // setExerciseList\n    // for (let property in exercise) {\n    //     if (property == e.target.name) {\n    //         const inputName = e.target.name\n    //         setExerciseList(prevState => [\n    //             ...prevState,\n    //             [inputName] = e.target.value\n    //             // can't say dot, have to do computed property\n    //             // looking for a property called inputname\n    //             // [e.target.name] is a computed property\n    //         ])\n    //     }\n    // }\n    setExerciseList(prevState => {\n      console.log(prevState[index]);\n      const inputName = e.target.name; // exercise is the object { exerciseName: '', setCount: '', repRange: '' }\n\n      const newState = prevState.map(exercise => exercise == prevState[index] ? [exercise.inputName] = e.target.value : exercise);\n      return newState;\n    });\n  } // console.log(exerciseList.forEach(exercise => ))\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Enter workout name\",\n      onChange: handleName,\n      value: workoutName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CheckIcon, {\n      onClick: () => dispatch(addWorkoutName(workoutName))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"exercise-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Exercise\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"# of Sets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Rep Range\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Lock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), exerciseList.map((exercise, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                value: exercise.exerciseName,\n                name: \"exerciseName\",\n                onChange: e => onChange(e, index),\n                placeholder: \"Bench Press\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                value: exercise.setCount,\n                name: \"setCount\",\n                onChange: e => onChange(e, index),\n                placeholder: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                value: exercise.repRange,\n                name: \"repRange\",\n                onChange: e => onChange(e, index),\n                placeholder: \"8-12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 32\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddIcon, {\n      onClick: addExercise\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitWorkout,\n      children: \"Submit Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AddWorkout, \"TCFraQQ01DxZqvJq4cAG2O95DdQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = AddWorkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddWorkout\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/AddWorkout.js"],"names":["React","useEffect","useRef","useState","NewExercise","AddIcon","useDispatch","useSelector","addWorkoutName","reset","programSlice","addWorkout","CheckIcon","AddWorkout","dispatch","fullWorkout","state","workout","programName","program","name","newExercise","exerciseName","setCount","repRange","keyId","setKeyId","workoutName","setWorkoutName","exerciseList","setExerciseList","workoutInfo","addExercise","console","log","prevKey","prevList","submitWorkout","addToServer","fetch","method","headers","body","JSON","stringify","then","res","json","data","handleName","e","target","value","onChange","index","prevState","inputName","newState","map","exercise"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport NewExercise from \"./NewExercise\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addWorkoutName, reset } from \"../redux/workoutSlice\";\r\nimport programSlice, { addWorkout } from \"../redux/programSlice\";\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n\r\n\r\nexport default function AddWorkout() {\r\n\r\n    const dispatch = useDispatch()\r\n    const fullWorkout = useSelector(state => state.workout)\r\n    const programName = useSelector(state => state.program.name)\r\n\r\n    const newExercise = {\r\n        exerciseName: '',\r\n        setCount: '',\r\n        repRange: ''\r\n    }\r\n\r\n    const [keyId, setKeyId] = useState(0)\r\n    const [workoutName, setWorkoutName] = useState('')\r\n    const [exerciseList, setExerciseList] = useState([])\r\n\r\n    // gives workout name and info\r\n    const workoutInfo = useSelector(state => state.workout)\r\n    \r\n    function addExercise() {\r\n        console.log('hello')\r\n        setKeyId(prevKey => prevKey + 1)\r\n        setExerciseList(prevList => [\r\n            ...prevList,\r\n            newExercise\r\n        ])\r\n    }\r\n\r\n    function submitWorkout() {\r\n\r\n        dispatch(addWorkout(fullWorkout))\r\n        \r\n        // dispatch(reset())\r\n\r\n        // addToServer()\r\n    }\r\n\r\n    function addToServer() {\r\n\r\n        // Add workout to DB\r\n        fetch('/api/workouts/add-workout', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify({ workoutName, programName, exerciseList })\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => console.log(data))\r\n\r\n\r\n        // Populate Program with workout\r\n        \r\n    }\r\n    \r\n    function handleName(e) {\r\n        setWorkoutName(e.target.value)\r\n    }\r\n\r\n    function onChange(e, index) {\r\n        // const exercise = exerciseList[index]\r\n        // const inputName = e.target.name\r\n        // // { exerciseName: '', setCount: '', repRange: '' }\r\n        // // exerciseName\r\n        // // setExerciseList\r\n        // for (let property in exercise) {\r\n        //     if (property == e.target.name) {\r\n        //         const inputName = e.target.name\r\n        //         setExerciseList(prevState => [\r\n        //             ...prevState,\r\n        //             [inputName] = e.target.value\r\n        //             // can't say dot, have to do computed property\r\n        //             // looking for a property called inputname\r\n        //             // [e.target.name] is a computed property\r\n        //         ])\r\n        //     }\r\n        // }\r\n\r\n        setExerciseList(prevState => {\r\n            console.log(prevState[index])\r\n            const inputName= e.target.name\r\n            // exercise is the object { exerciseName: '', setCount: '', repRange: '' }\r\n            const newState = prevState.map(exercise => exercise == prevState[index] ? [exercise.inputName] = e.target.value : exercise)\r\n            return newState\r\n        })\r\n    }\r\n\r\n    // console.log(exerciseList.forEach(exercise => ))\r\n\r\n    return (\r\n        <>\r\n            <input placeholder='Enter workout name' onChange={handleName} value={workoutName}></input>\r\n            <CheckIcon onClick={() => dispatch(addWorkoutName(workoutName))}/>\r\n            <table className='exercise-table'>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Exercise</th>\r\n                        <th># of Sets</th>\r\n                        <th>Rep Range</th>\r\n                        <th>Lock</th>\r\n                    </tr>\r\n                    {/* <NewExercise key={keyId} id={keyId} exerciseInfo={exerciseInfo} handleExerciseInfo={handleExerciseInfo}/> */}\r\n                    {exerciseList.map((exercise, index) => {\r\n                        return <tr key={index}>\r\n                            <td>\r\n                                <input value={exercise.exerciseName} name='exerciseName' onChange={e => onChange(e, index)} placeholder='Bench Press'></input>\r\n                            </td>\r\n                            <td>\r\n                                <input value={exercise.setCount} name='setCount' onChange={e => onChange(e, index)} placeholder='3'></input>\r\n                            </td>\r\n                            <td >\r\n                                <input value={exercise.repRange} name='repRange' onChange={e => onChange(e, index)} placeholder='8-12'></input>\r\n                            </td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <AddIcon onClick={addExercise} />\r\n            <button onClick={submitWorkout}>Submit Workout</button>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Login user\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Logout\n\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n});\nexport const updateCommunity = createAsyncThunk('auth/community', async (user, thunkAPI) => {\n  try {\n    return await authService.joinCommunity(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(joinCommunity.pending, state => {\n      state.isLoading = true;\n    }).addCase(joinCommunity.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(joinCommunity.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }); // .addCase(logout.fulfulled, (state) => {\n    //     state.user = null\n    // })\n  }\n});\nexport default authSlice.reducer;\nexport const {\n  reset\n} = authSlice.actions;","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/redux/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","updateCommunity","joinCommunity","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport authService from './authService'\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst initialState = {\r\n    user: user ? user : null,\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: '',\r\n}\r\n\r\n// Register user\r\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\r\n    try {\r\n        return await authService.register(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n    try {\r\n        return await authService.login(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Logout\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n    await authService.logout()\r\n})\r\n\r\nexport const updateCommunity = createAsyncThunk('auth/community', async (user, thunkAPI) => {\r\n    try {\r\n        return await authService.joinCommunity(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isError = false\r\n            state.isSuccess = false\r\n            state.message = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(register.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(register.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(register.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            .addCase(login.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(login.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            .addCase(joinCommunity.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(joinCommunity.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(joinCommunity.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            // .addCase(logout.fulfulled, (state) => {\r\n            //     state.user = null\r\n            // })\r\n    }\r\n})\r\n\r\nexport default authSlice.reducer\r\nexport const { reset } = authSlice.actions\r\n\r\n"]},"metadata":{},"sourceType":"module"}
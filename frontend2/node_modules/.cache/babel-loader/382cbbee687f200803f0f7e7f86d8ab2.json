{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\MainFeed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MakePost from './MakePost';\nimport '../css/mainfeed.css';\nimport Post from './Post';\nimport { Box, Switch, FormControlLabel } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost } from '../redux/postSlice';\nimport socket from '../sockets/friendSocket';\nimport { dateFormatter } from '../utility/formateDate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MainFeed() {\n  _s();\n\n  const initialPostState = {\n    textContent: '',\n    postImg: ''\n  };\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.auth.user._id);\n  const [postsArray, setPostsArray] = useState([]);\n  const [postInfo, setPostInfo] = useState(initialPostState); // Should default to false, but my function doesn't detect the state change right away\n\n  const [switchStatus, setSwitchStatus] = useState(true);\n  useEffect(() => {\n    fetch(`/api/posts/${id}`).then(res => res.json()).then(data => {\n      setPostsArray(data);\n      console.log(data);\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('received-post', () => {\n      fetch(`/api/posts/${id}`).then(res => res.json()).then(data => {\n        setPostsArray(data);\n        console.log(data);\n      });\n    });\n  }, [socket]);\n\n  function handlePostTextChange(e) {\n    setPostInfo(prevState => ({ ...prevState,\n      textContent: e.target.value\n    }));\n  }\n\n  function handleFileInputChange(e) {\n    const file = e.target.files[0];\n    previewFile(file);\n  }\n\n  function previewFile(file) {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onloadend = () => {\n      setPostInfo(prevState => ({ ...prevState,\n        postImg: reader.result\n      }));\n    };\n  }\n\n  function socketPost(e) {\n    // go over\n    dispatch(createPost(postInfo));\n    setPostInfo(initialPostState);\n    socket.emit('make-post');\n  }\n\n  function changeFeed() {\n    setSwitchStatus(prevStatus => !prevStatus);\n\n    if (switchStatus) {\n      fetch('/api/posts/').then(res => res.json()).then(data => {\n        setPostsArray(data);\n        console.log(data);\n        console.log('discovering');\n      });\n    } else {\n      fetch(`/api/posts/${id}`).then(res => res.json()).then(data => {\n        setPostsArray(data);\n        console.log(data);\n      });\n    }\n  }\n\n  const postElements = postsArray.map((post, index) => {\n    const rawDate = post.createdAt.toString();\n    const date = dateFormatter(rawDate);\n    console.log(date);\n    const {\n      community,\n      username,\n      profilePic\n    } = post.user;\n    console.log(community);\n    return /*#__PURE__*/_jsxDEV(Post // Change date format by doing toString\n    , {\n      communityId: community,\n      textContent: post.content,\n      date: date,\n      username: username,\n      profilePic: profilePic\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(MakePost // changed from handleClick to test\n    , {\n      handleClick: socketPost,\n      handlePostTextChange: handlePostTextChange,\n      textContent: postInfo.textContent,\n      handleFileInputChange: handleFileInputChange,\n      previewSource: postInfo.postImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        label: \"Discover\",\n        control: /*#__PURE__*/_jsxDEV(Switch, {\n          onChange: changeFeed,\n          value: switchStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), postElements.reverse()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n} // How does socket.io work?\n// You can listen for events, and emit events\n// Anyone listening for a specific event will get it when it is emitted\n// Create event to emit message\n// Also add listener for emissions\n\n_s(MainFeed, \"IOnIgoVtya7emiFlfcx6947hVko=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MainFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainFeed\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/MainFeed.js"],"names":["React","useEffect","useState","MakePost","Post","Box","Switch","FormControlLabel","useDispatch","useSelector","createPost","socket","dateFormatter","MainFeed","initialPostState","textContent","postImg","dispatch","id","state","auth","user","_id","postsArray","setPostsArray","postInfo","setPostInfo","switchStatus","setSwitchStatus","fetch","then","res","json","data","console","log","on","handlePostTextChange","e","prevState","target","value","handleFileInputChange","file","files","previewFile","reader","FileReader","readAsDataURL","onloadend","result","socketPost","emit","changeFeed","prevStatus","postElements","map","post","index","rawDate","createdAt","toString","date","community","username","profilePic","content","reverse"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport MakePost from './MakePost'\r\nimport '../css/mainfeed.css'\r\nimport Post from './Post'\r\nimport { Box, Switch, FormControlLabel } from '@mui/material'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createPost } from '../redux/postSlice'\r\nimport socket from '../sockets/friendSocket'\r\nimport { dateFormatter } from '../utility/formateDate'\r\n\r\nexport default function MainFeed() {\r\n\r\n    const initialPostState = {\r\n        textContent: '',\r\n        postImg: ''\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n    const id = useSelector(state => state.auth.user._id)\r\n    const [postsArray, setPostsArray] = useState([])\r\n    const [postInfo, setPostInfo] = useState(initialPostState)\r\n\r\n    // Should default to false, but my function doesn't detect the state change right away\r\n    const [switchStatus, setSwitchStatus] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetch(`/api/posts/${id}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setPostsArray(data)\r\n                console.log(data)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('received-post', () => {\r\n            fetch(`/api/posts/${id}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setPostsArray(data)\r\n                    console.log(data)\r\n                })\r\n        })\r\n    }, [socket])\r\n\r\n    function handlePostTextChange(e) {\r\n        setPostInfo(prevState => ({\r\n            ...prevState, \r\n            textContent: e.target.value\r\n        }))\r\n    }\r\n\r\n    function handleFileInputChange(e) {\r\n        const file = e.target.files[0]\r\n        previewFile(file)\r\n    }\r\n\r\n    function previewFile(file) {\r\n        const reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        reader.onloadend = () => {\r\n            setPostInfo(prevState => ({\r\n                ...prevState, \r\n                postImg: reader.result\r\n            }))\r\n        }\r\n    }\r\n\r\n    function socketPost(e) {\r\n        // go over\r\n        dispatch(createPost(postInfo))\r\n        \r\n        setPostInfo(initialPostState)\r\n\r\n        socket.emit('make-post')\r\n    }\r\n\r\n    function changeFeed() {\r\n        setSwitchStatus(prevStatus => !prevStatus)\r\n\r\n        if (switchStatus) {\r\n            fetch('/api/posts/')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setPostsArray(data)\r\n                    console.log(data)\r\n                    console.log('discovering')\r\n                })\r\n        } else {\r\n            fetch(`/api/posts/${id}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setPostsArray(data)\r\n                    console.log(data)\r\n                })\r\n        }\r\n    }\r\n\r\n    const postElements = postsArray.map((post, index) => {\r\n\r\n        const rawDate = post.createdAt.toString()\r\n        const date = dateFormatter(rawDate)\r\n        console.log(date)\r\n        \r\n        const { community, username, profilePic } = post.user\r\n        console.log(community)\r\n\r\n        return <Post\r\n        // Change date format by doing toString\r\n            communityId={community}\r\n            textContent={post.content}\r\n            date={date}\r\n            username={username}\r\n            key={index}\r\n            profilePic={profilePic}\r\n        />\r\n    })\r\n    \r\n    return (\r\n        <main className='feed'>\r\n            <MakePost \r\n                // changed from handleClick to test\r\n                handleClick= {socketPost}\r\n                handlePostTextChange= {handlePostTextChange}\r\n                textContent = {postInfo.textContent}\r\n                handleFileInputChange={handleFileInputChange}\r\n                previewSource={postInfo.postImg}\r\n            />\r\n            <Box>\r\n                <FormControlLabel label='Discover' control={<Switch onChange={changeFeed} value={switchStatus}/>} />\r\n            </Box>\r\n            {postElements.reverse()}\r\n        </main>\r\n    )\r\n}\r\n\r\n// How does socket.io work?\r\n// You can listen for events, and emit events\r\n\r\n// Anyone listening for a specific event will get it when it is emitted\r\n\r\n// Create event to emit message\r\n// Also add listener for emissions"]},"metadata":{},"sourceType":"module"}
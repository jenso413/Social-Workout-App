{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { postService } from './postService';\nconst initialState = {\n  postsArray: [],\n  isError: false,\n  isLoading: false,\n  isSuccess: false,\n  message: ''\n};\nexport const createPost = createAsyncThunk('user/posts', async (postData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    const res = await postService.createPost(postData, token);\n    console.log(res);\n    return res;\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createPost.pending, state => {\n      state.isLoading = true;\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.postsArray.push(action.payload);\n    }).addCase(createPost.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport default postSlice.reducer;\nexport const {\n  reset\n} = postSlice.actions;","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/redux/postSlice.js"],"names":["createAsyncThunk","createSlice","postService","initialState","postsArray","isError","isLoading","isSuccess","message","createPost","postData","thunkAPI","token","getState","auth","user","res","console","log","error","response","data","toString","rejectWithValue","postSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","reducer","actions"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,OAAO,EAAE,KAFQ;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAIjBC,EAAAA,SAAS,EAAE,KAJM;AAKjBC,EAAAA,OAAO,EAAE;AALQ,CAArB;AAQA,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CAAC,YAAD,EAAgB,OAAOU,QAAP,EAAiBC,QAAjB,KAA8B;AACpF,MAAI;AACA,UAAMC,KAAK,GAAGD,QAAQ,CAACE,QAAT,GAAoBC,IAApB,CAAyBC,IAAzB,CAA8BH,KAA5C;AACA,UAAMI,GAAG,GAAG,MAAMd,WAAW,CAACO,UAAZ,CAAuBC,QAAvB,EAAiCE,KAAjC,CAAlB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAOA,GAAP;AACH,GALD,CAKE,OAAOG,KAAP,EAAc;AACZ,UAAMX,OAAO,GAAIW,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAjC,IAAyCF,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBb,OAA9D,IAA0EW,KAAK,CAACX,OAAhF,IAA2FW,KAAK,CAACG,QAAN,EAA3G;AACA,WAAOX,QAAQ,CAACY,eAAT,CAAyBf,OAAzB,CAAP;AACH;AACJ,CAVyC,CAAnC;AAYP,OAAO,MAAMgB,SAAS,GAAGvB,WAAW,CAAC;AACjCwB,EAAAA,IAAI,EAAE,OAD2B;AAEjCtB,EAAAA,YAFiC;AAGjCuB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAGC,KAAD,IAAWzB;AADZ,GAHuB;AAMjC0B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACatB,UAAU,CAACuB,OADxB,EACkCJ,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACtB,SAAN,GAAkB,IAAlB;AACH,KAHL,EAIKyB,OAJL,CAIatB,UAAU,CAACwB,SAJxB,EAImC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9CN,MAAAA,KAAK,CAACtB,SAAN,GAAkB,KAAlB;AACAsB,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACAqB,MAAAA,KAAK,CAACxB,UAAN,CAAiB+B,IAAjB,CAAsBD,MAAM,CAACE,OAA7B;AACH,KARL,EASKL,OATL,CASatB,UAAU,CAAC4B,QATxB,EASkC,CAACT,KAAD,EAAQM,MAAR,KAAmB;AAC7CN,MAAAA,KAAK,CAACtB,SAAN,GAAkB,KAAlB;AACAsB,MAAAA,KAAK,CAACvB,OAAN,GAAgB,IAAhB;AACAuB,MAAAA,KAAK,CAACpB,OAAN,GAAgB0B,MAAM,CAACE,OAAvB;AACH,KAbL;AAcH;AArBgC,CAAD,CAA7B;AAwBP,eAAeZ,SAAS,CAACc,OAAzB;AACA,OAAO,MAAM;AAAEX,EAAAA;AAAF,IAAYH,SAAS,CAACe,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { postService } from './postService'\r\n\r\nconst initialState = {\r\n    postsArray: [],\r\n    isError: false,\r\n    isLoading: false,\r\n    isSuccess: false,\r\n    message: ''\r\n}\r\n\r\nexport const createPost = createAsyncThunk('user/posts',  async (postData, thunkAPI) => {\r\n    try {\r\n        const token = thunkAPI.getState().auth.user.token\r\n        const res = await postService.createPost(postData, token)\r\n        console.log(res)\r\n        return res\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const postSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => initialState\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(createPost.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(createPost.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.postsArray.push(action.payload)\r\n            })\r\n            .addCase(createPost.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport default postSlice.reducer\r\nexport const { reset } = postSlice.actions"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { useSelector } from \"react-redux\";\nconst initialState = {\n  userId: '',\n  workoutName: '',\n  workoutId: '',\n  programName: '',\n  exercises: []\n};\nexport const logWorkoutToDB = createAsyncThunk('/workout/log', async thunkAPI => {\n  try {\n    fetch('', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify()\n    });\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst logWorkoutSlice = createSlice({\n  name: 'logWorkout',\n  initialState,\n  reducers: {\n    logExercise: (state, action) => {\n      state.exercises.push(action.payload);\n    },\n    logWorkoutData: (state, action) => {\n      state.userId = action.payload.userId;\n      state.workoutName = action.payload.workoutName;\n      state.workoutId = action.payload.workoutId;\n      state.programName = action.payload.programName;\n    },\n    reset: state => initialState\n  }\n});\nexport default logWorkoutSlice.reducer;\nexport const {\n  logExercise,\n  logWorkoutData,\n  reset\n} = logWorkoutSlice.actions;","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/redux/logWorkoutSlice.js"],"names":["createAsyncThunk","createSlice","useSelector","initialState","userId","workoutName","workoutId","programName","exercises","logWorkoutToDB","thunkAPI","fetch","method","headers","body","JSON","stringify","error","console","log","logWorkoutSlice","name","reducers","logExercise","state","action","push","payload","logWorkoutData","reset","reducer","actions"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,SAAS,EAAE,EAHM;AAIjBC,EAAAA,WAAW,EAAE,EAJI;AAKjBC,EAAAA,SAAS,EAAE;AALM,CAArB;AAQA,OAAO,MAAMC,cAAc,GAAGT,gBAAgB,CAAC,cAAD,EAAiB,MAAOU,QAAP,IAAoB;AAC/E,MAAI;AACAC,IAAAA,KAAK,CAAC,EAAD,EAAK;AACNC,MAAAA,MAAM,EAAE,MADF;AAENC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAFH;AAKNC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL;AALA,KAAL,CAAL;AAOH,GARD,CAQE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAZ6C,CAAvC;AAcP,MAAMG,eAAe,GAAGnB,WAAW,CAAC;AAChCoB,EAAAA,IAAI,EAAE,YAD0B;AAEhClB,EAAAA,YAFgC;AAGhCmB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAAChB,SAAN,CAAgBkB,IAAhB,CAAqBD,MAAM,CAACE,OAA5B;AACH,KAHK;AAINC,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACpB,MAAN,GAAeqB,MAAM,CAACE,OAAP,CAAevB,MAA9B;AACAoB,MAAAA,KAAK,CAACnB,WAAN,GAAoBoB,MAAM,CAACE,OAAP,CAAetB,WAAnC;AACAmB,MAAAA,KAAK,CAAClB,SAAN,GAAkBmB,MAAM,CAACE,OAAP,CAAerB,SAAjC;AACAkB,MAAAA,KAAK,CAACjB,WAAN,GAAoBkB,MAAM,CAACE,OAAP,CAAepB,WAAnC;AACH,KATK;AAUNsB,IAAAA,KAAK,EAAGL,KAAD,IAAWrB;AAVZ;AAHsB,CAAD,CAAnC;AAiBA,eAAeiB,eAAe,CAACU,OAA/B;AACA,OAAO,MAAM;AAAEP,EAAAA,WAAF;AAAeK,EAAAA,cAAf;AAA+BC,EAAAA;AAA/B,IAAyCT,eAAe,CAACW,OAA/D","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst initialState = {\r\n    userId: '',\r\n    workoutName: '',\r\n    workoutId: '',\r\n    programName: '',\r\n    exercises: []\r\n}\r\n\r\nexport const logWorkoutToDB = createAsyncThunk('/workout/log', async (thunkAPI) => {\r\n    try {   \r\n        fetch('', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/json'\r\n            },\r\n            body: JSON.stringify()\r\n        })\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n})\r\n\r\nconst logWorkoutSlice = createSlice({\r\n    name: 'logWorkout', \r\n    initialState,\r\n    reducers: {\r\n        logExercise: (state, action) => {\r\n            state.exercises.push(action.payload)\r\n        },\r\n        logWorkoutData: (state, action) => {\r\n            state.userId = action.payload.userId\r\n            state.workoutName = action.payload.workoutName\r\n            state.workoutId = action.payload.workoutId\r\n            state.programName = action.payload.programName\r\n        },\r\n        reset: (state) => initialState\r\n    }\r\n})\r\n\r\nexport default logWorkoutSlice.reducer\r\nexport const { logExercise, logWorkoutData, reset } = logWorkoutSlice.actions"]},"metadata":{},"sourceType":"module"}
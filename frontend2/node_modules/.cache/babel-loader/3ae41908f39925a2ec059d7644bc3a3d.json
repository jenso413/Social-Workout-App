{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michael\\\\Documents\\\\100devs\\\\workout-react-app\\\\frontend2\\\\src\\\\components\\\\MainFeed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport MakePost from './MakePost';\nimport '../css/mainfeed.css';\nimport Post from './Post';\nimport { Box, Switch, FormControlLabel } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost } from '../redux/postSlice';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect('http://localhost:3001');\nexport default function MainFeed() {\n  _s();\n\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.auth.user._id);\n  const [postsArray, setPostsArray] = useState([]);\n  const [postInfo, setPostInfo] = useState(''); // Should default to false, but my function doesn't detect the state change right away\n\n  const [switchStatus, setSwitchStatus] = useState(true);\n  useEffect(() => {\n    fetch(`/api/posts/${id}`).then(res => res.json()).then(data => {\n      setPostsArray(data);\n      console.log(data);\n    });\n  }, []); // Set input content to current input value\n\n  function handleInput(e) {\n    setPostInfo(e.target.value);\n  } // On button click\n\n\n  function handleClick(e) {\n    dispatch(createPost(postInfo));\n    setPostInfo('');\n  }\n\n  const postElements = postsArray.map((post, index) => {\n    // console.log(post)\n    const date = post.createdAt.toString().slice(0, 10);\n    return /*#__PURE__*/_jsxDEV(Post, {\n      textContent: post.content,\n      date: date,\n      username: post.username\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  });\n\n  function changeFeed() {\n    setSwitchStatus(prevStatus => !prevStatus);\n\n    if (switchStatus) {\n      fetch('/api/posts/').then(res => res.json()).then(data => {\n        setPostsArray(data);\n        console.log(data);\n        console.log('discovering');\n      });\n    } else {\n      fetch(`/api/posts/${id}`).then(res => res.json()).then(data => {\n        setPostsArray(data);\n        console.log(data);\n      });\n    }\n  } // add this to onclick\n\n\n  function socketPost() {\n    socket.emit('make-post', {\n      message: 'Hello'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(MakePost, {\n      handleClick: handleClick,\n      handleInput: handleInput,\n      postInfo: postInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n        label: \"Discover\",\n        control: /*#__PURE__*/_jsxDEV(Switch, {\n          onChange: changeFeed,\n          value: switchStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), postElements.reverse()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n} // How does socket.io work?\n// You can listen for events, and emit events\n// Anyone listening for a specific event will get it when it is emitted\n// Create event to emit message\n// Also add listener for emissions\n\n_s(MainFeed, \"U7fqtRvvzVJVNZtfEzGQKd/zFGs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MainFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainFeed\");","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/components/MainFeed.js"],"names":["React","useEffect","useState","MakePost","Post","Box","Switch","FormControlLabel","useDispatch","useSelector","createPost","io","socket","connect","MainFeed","dispatch","id","state","auth","user","_id","postsArray","setPostsArray","postInfo","setPostInfo","switchStatus","setSwitchStatus","fetch","then","res","json","data","console","log","handleInput","e","target","value","handleClick","postElements","map","post","index","date","createdAt","toString","slice","content","username","changeFeed","prevStatus","socketPost","emit","message","reverse"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport MakePost from './MakePost'\r\nimport '../css/mainfeed.css'\r\nimport Post from './Post'\r\nimport { Box, Switch, FormControlLabel } from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createPost } from '../redux/postSlice'\r\nimport io from 'socket.io-client'\r\nconst socket = io.connect('http://localhost:3001')\r\n\r\nexport default function MainFeed() {\r\n\r\n    const dispatch = useDispatch()\r\n    const id = useSelector(state => state.auth.user._id)\r\n    const [postsArray, setPostsArray] = useState([])\r\n    const [postInfo, setPostInfo] = useState('')\r\n\r\n    // Should default to false, but my function doesn't detect the state change right away\r\n    const [switchStatus, setSwitchStatus] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetch(`/api/posts/${id}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setPostsArray(data)\r\n                console.log(data)\r\n            })\r\n    }, [])\r\n\r\n    // Set input content to current input value\r\n    function handleInput(e) {\r\n        setPostInfo(e.target.value)\r\n    }\r\n\r\n    // On button click\r\n    function handleClick(e) {\r\n        dispatch(createPost(postInfo))\r\n        \r\n        setPostInfo('')\r\n    }\r\n\r\n    const postElements = postsArray.map((post, index) => {\r\n\r\n        // console.log(post)\r\n        const date = post.createdAt.toString().slice(0, 10);\r\n\r\n        return <Post\r\n            textContent={post.content}\r\n            date={date}\r\n            username={post.username}\r\n            key={index}\r\n        />\r\n    })\r\n\r\n    function changeFeed() {\r\n        setSwitchStatus(prevStatus => !prevStatus)\r\n\r\n        if (switchStatus) {\r\n            fetch('/api/posts/')\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setPostsArray(data)\r\n                    console.log(data)\r\n                    console.log('discovering')\r\n                })\r\n        } else {\r\n            fetch(`/api/posts/${id}`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setPostsArray(data)\r\n                    console.log(data)\r\n                })\r\n        }\r\n    }\r\n\r\n    // add this to onclick\r\n    function socketPost() {\r\n        socket.emit('make-post', {message: 'Hello'})\r\n    }\r\n    \r\n\r\n    return (\r\n        <main className='feed'>\r\n            <MakePost \r\n                handleClick= {handleClick}\r\n                handleInput= {handleInput}\r\n                postInfo = {postInfo}\r\n            />\r\n            <Box>\r\n                <FormControlLabel label='Discover' control={<Switch onChange={changeFeed} value={switchStatus}/>} />\r\n            </Box>\r\n            {postElements.reverse()}\r\n        </main>\r\n    )\r\n}\r\n\r\n// How does socket.io work?\r\n// You can listen for events, and emit events\r\n\r\n// Anyone listening for a specific event will get it when it is emitted\r\n\r\n// Create event to emit message\r\n// Also add listener for emissions"]},"metadata":{},"sourceType":"module"}
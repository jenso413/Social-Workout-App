{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService'; // Get user from localStorage\n\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null\n}; // Register user\n// export const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n//     try {\n//         return await authService.register(user)\n//     } catch (error) {\n//         const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\n//         return thunkAPI.rejectWithValue(message)\n//     }\n// })\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/mtj21/Documents/coding/Social-Workout-App/frontend2/src/redux/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","userSlice","name","reducers","reset","state","isLoading","isError","isSuccess","message"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AAEA,MAAMC,YAAY,GAAG;AACjBL,EAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU;AADH,CAArB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMM,SAAS,GAAGT,WAAW,CAAC;AACjCU,EAAAA,IAAI,EAAE,MAD2B;AAEjCF,EAAAA,YAFiC;AAGjCG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AACdA,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,MAAAA,KAAK,CAACE,OAAN,GAAgB,KAAhB;AACAF,MAAAA,KAAK,CAACG,SAAN,GAAkB,KAAlB;AACAH,MAAAA,KAAK,CAACI,OAAN,GAAgB,EAAhB;AACH;AANK;AAHuB,CAAD,CAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport authService from './authService'\r\n\r\n// Get user from localStorage\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst initialState = {\r\n    user: user ? user : null\r\n}\r\n\r\n// Register user\r\n// export const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\r\n//     try {\r\n//         return await authService.register(user)\r\n//     } catch (error) {\r\n//         const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n//         return thunkAPI.rejectWithValue(message)\r\n//     }\r\n// })\r\n\r\nexport const userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isError = false\r\n            state.isSuccess = false\r\n            state.message = ''\r\n        }\r\n    },\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}
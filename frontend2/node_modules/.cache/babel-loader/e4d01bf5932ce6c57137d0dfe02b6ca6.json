{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport authService from './authService';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Register user\n\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Login user\n\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Logout\n\nexport const logout = createAsyncThunk('auth/logout', async () => {\n  await authService.logout();\n}); // Update community \n\nexport const updateCommunity = createAsyncThunk('auth/community', async (userData, thunkAPI) => {\n  try {\n    console.log(userData);\n    return await authService.updateCommunity(userData);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const addFriend = createAsyncThunk('/friend/add', async (ids, thunkAPI) => {\n  try {\n    return await authService.addFriend(ids);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.isLoading = false;\n      state.isError = false;\n      state.isSuccess = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(login.pending, state => {\n      state.isLoading = true;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n      state.user = null;\n    }).addCase(updateCommunity.pending, state => {\n      state.isLoading = true;\n    }).addCase(updateCommunity.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(updateCommunity.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }); // .addCase(logout.fulfulled, (state) => {\n    //     state.user = null\n    // })\n  }\n});\nexport default authSlice.reducer;\nexport const {\n  reset\n} = authSlice.actions;","map":{"version":3,"sources":["C:/Users/Michael/Documents/100devs/workout-react-app/frontend2/src/redux/authSlice.js"],"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","initialState","isError","isSuccess","isLoading","message","register","thunkAPI","error","response","data","toString","rejectWithValue","login","logout","updateCommunity","userData","console","log","addFriend","ids","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport authService from './authService'\r\n\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\n\r\nconst initialState = {\r\n    user: user ? user : null,\r\n    isError: false,\r\n    isSuccess: false,\r\n    isLoading: false,\r\n    message: '',\r\n}\r\n\r\n// Register user\r\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\r\n    try {\r\n        return await authService.register(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n    try {\r\n        return await authService.login(user)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\n// Logout\r\nexport const logout = createAsyncThunk('auth/logout', async () => {\r\n    await authService.logout()\r\n})\r\n\r\n// Update community \r\nexport const updateCommunity = createAsyncThunk('auth/community', async (userData, thunkAPI) => {\r\n    try {\r\n        console.log(userData)\r\n        return await authService.updateCommunity(userData)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const addFriend = createAsyncThunk('/friend/add', async (ids, thunkAPI) => {\r\n    try {\r\n        return await authService.addFriend(ids)\r\n    } catch (error) {\r\n        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString()\r\n        return thunkAPI.rejectWithValue(message)\r\n    }\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        reset: (state) => {\r\n            state.isLoading = false\r\n            state.isError = false\r\n            state.isSuccess = false\r\n            state.message = ''\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(register.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(register.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(register.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            .addCase(login.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(login.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n                state.user = null\r\n            })\r\n            .addCase(updateCommunity.pending, (state) => {\r\n                state.isLoading = true\r\n            })\r\n            .addCase(updateCommunity.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n                state.isSuccess = true\r\n                state.user = action.payload\r\n            })\r\n            .addCase(updateCommunity.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.isError = true\r\n                state.message = action.payload\r\n            })\r\n            // .addCase(logout.fulfulled, (state) => {\r\n            //     state.user = null\r\n            // })\r\n    }\r\n})\r\n\r\nexport default authSlice.reducer\r\nexport const { reset } = authSlice.actions\r\n\r\n"]},"metadata":{},"sourceType":"module"}